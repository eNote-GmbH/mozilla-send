variables:
  MAIN_BRANCH: "enote"
  DOCKER_IMAGE_URI: "enote/mozilla-send"
  DOCKER_CONTEXT_NAME: "enote-mozilla-send"

stages:
  - prepare
  - test
  - docker

cache:
  key: mozilla-send-npm
  policy: pull-push
  paths:
    - .npm/

.prepare-template:
  stage: prepare
  image: bitnami/git
  artifacts:
    reports:
      dotenv: docker-variables.env

prepare-branch:
  extends: .prepare-template
  script:
    - set -e
    - 'echo "CI triggered by: $CI_PIPELINE_SOURCE"'
    - echo "APP_VERSION_TAG=$(git describe --always --tag HEAD)" > docker-variables.env
  rules:
    - if: '$CI_COMMIT_REF_NAME != $CI_COMMIT_TAG'

prepare-tag:
  extends: .prepare-template
  script:
    - set -e
    - 'echo "CI triggered by: $CI_PIPELINE_SOURCE"'
    - git tag --delete "$CI_COMMIT_TAG"
    - echo "APP_VERSION_TAG=$(git describe --always --tag HEAD)" > docker-variables.env
  rules:
    - if: '$CI_COMMIT_REF_NAME == $CI_COMMIT_TAG'

# Build Send, run npm tests
test:
  stage: test
  image: "node:16"
  before_script:
    # Install dependencies
    - apt-get update
    - apt-get install -y git python3 build-essential libxtst6

    # Prepare Chrome for puppeteer
    - apt-get install -y wget gnupg
    - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
    - sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
    - apt-get update
    - apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 libx11-xcb1 --no-install-recommends
  script:
    - npm ci --cache .npm --prefer-offline
    - npm run lint
    - npm test

.docker-template:
  stage: docker
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script: |
    mkdir -p /kaniko/.docker
    echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    if [ -n "$FROM_TAG" ]; then
      echo "Re-tagging Docker image from $FROM_TAG to $TAG"
      echo "FROM $CI_REGISTRY_IMAGE:$FROM_TAG" | /kaniko/executor --context $CI_PROJECT_DIR --dockerfile /dev/stdin --destination $CI_REGISTRY_IMAGE:$TAG $KANIKO_ARGS
    else
      echo "Building Docker image for tag $TAG"
      /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE:$TAG $KANIKO_ARGS
    fi

docker-retag:
  extends: .docker-template
  variables:
    TAG: $CI_COMMIT_TAG
    FROM_TAG: $APP_VERSION_TAG
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_REF_NAME == $CI_COMMIT_TAG && $CI_COMMIT_TAG =~ /^v[0-9]\.[0-9\.]+/'

docker-main:
  extends: .docker-template
  variables:
    TAG: $APP_VERSION_TAG
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" && $CI_COMMIT_REF_NAME != $CI_COMMIT_TAG && $CI_COMMIT_REF_NAME == "$MAIN_BRANCH"'

docker-no-push:
  extends: .docker-template
  variables:
    TAG: "${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}"
    KANIKO_ARGS: "--no-push"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_COMMIT_REF_NAME != $CI_COMMIT_TAG && $CI_COMMIT_REF_NAME != "$MAIN_BRANCH"'
